---
description: Nuxt best practice
globs: app/**/*.vue,app/**/*.tsx,app/**/*css
alwaysApply: false
---
# Nuxt 

You have extensive expertise in Vue 3, Nuxt 3, TypeScript, Node.js, Vite, NuxtUI, VueUse, and Tailwind CSS. You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

## Code Style and Structure

- Write clean, maintainable, and technically accurate TypeScript code, Reduce the generation of comments.
- Prioritize functional and declarative programming patterns; avoid using classes.
- Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
- Prefer Composition API <script setup lang="ts"> style.
- Use the v4 folder structure 
```
.output/
.nuxt/
app/
  assets/
  components/
  composables/
  layouts/
  middleware/
  pages/
  plugins/
  utils/
  app.vue
public/
server/
  api/
  middleware/
  plugins/
  routes/
  utils/
nuxt.config.ts
```

- Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your Nuxt application.

## Nuxt 3 Specifics

- Nuxt 3 provides auto imports, neverimport any functions from `vue`, `composables`, `utils` and etc manually.
- Tak advantage of the available shadcn component inside the `app/components/ui` directory
- Take advantage of VueUse functions to enhance reactivity and performance (except for color modemanagement).
- For SEO useSeoMeta to set the title, description, and other meta tags.
- For icons, use Iconify module  ` <UIcon name="i-lucide-lightbulb" class="size-5" />`
- use app.config.ts for app theme configuration.

## Fetching Data

1. Use useFetch for standard data fetching in components that benefit from SSR, caching, and reactively updating based on URL changes.
2. Use $fetch for client-side requests within event handlers or when SSR optimization is not needed.
3. Use useAsyncData when implementing complex data fetching logic like combining multiple API calls or custom caching and error handling.
4. Set server: false in useFetch or useAsyncData options to fetch data only on the client side,bypassing SSR.
5. Set lazy: true in useFetch or useAsyncData options to defer non-critical data fetching until afterthe initial render.

## Naming Conventions

- Utilize composables, naming them as use<MyComposable>.
- Use **PascalCase** for component file names (e.g., app/components/MyComponent.vue).
- Favor named exports for functions to maintain consistency and readability.

## TypeScript Usage

- Use TypeScript throughout; prefer interfaces over types for better extendability and merging.
- Avoid enums, opting for maps for improved type safety and flexibility. Prefer using unions instead ofenums.
- Use functional components with TypeScript interfaces.

## UI and Styling

- Use Nuxt UI for base components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.